[
  {
    "op": "core/column-removal",
    "columnName": "CASE_NUMBER",
    "description": "Remove column CASE_NUMBER"
  },
  {
    "op": "core/row-removal",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "CASE_STATUS",
          "expression": "value",
          "columnName": "CASE_STATUS",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "Determination Issued - Rejected",
                "l": "Determination Issued - Rejected"
              }
            },
            {
              "v": {
                "v": "Withdrawn",
                "l": "Withdrawn"
              }
            },
            {
              "v": {
                "v": "Determination Issued - Denied",
                "l": "Determination Issued - Denied"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "description": "Remove rows"
  },
  {
    "op": "core/column-removal",
    "columnName": "CASE_STATUS",
    "description": "Remove column CASE_STATUS"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "RECEIVED_DATE",
    "expression": "jython:values = map(lambda x: int(x), value.split('/'))\n\nyear = values[2]\nyear_str = str(year)\n\nmonth = values[0]\nif month < 10:\n  month_str = '0' + str(month)\nelse:\n  month_str = str(month)\n\nday = values[0]\nif day < 10:\n  day_str = '0' + str(day)\nelse:\n  day_str = str(day)\n\nreturn year_str + '-' + month_str + '-' + day_str",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column RECEIVED_DATE using expression jython:values = map(lambda x: int(x), value.split('/'))\n\nyear = values[2]\nyear_str = str(year)\n\nmonth = values[0]\nif month < 10:\n  month_str = '0' + str(month)\nelse:\n  month_str = str(month)\n\nday = values[0]\nif day < 10:\n  day_str = '0' + str(day)\nelse:\n  day_str = str(day)\n\nreturn year_str + '-' + month_str + '-' + day_str"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "DECISION_DATE",
    "expression": "jython:values = map(lambda x: int(x), value.split('/'))\n\nyear = values[2]\nyear_str = str(year)\n\nmonth = values[0]\nif month < 10:\n  month_str = '0' + str(month)\nelse:\n  month_str = str(month)\n\nday = values[0]\nif day < 10:\n  day_str = '0' + str(day)\nelse:\n  day_str = str(day)\n\nreturn year_str + '-' + month_str + '-' + day_str",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column DECISION_DATE using expression jython:values = map(lambda x: int(x), value.split('/'))\n\nyear = values[2]\nyear_str = str(year)\n\nmonth = values[0]\nif month < 10:\n  month_str = '0' + str(month)\nelse:\n  month_str = str(month)\n\nday = values[0]\nif day < 10:\n  day_str = '0' + str(day)\nelse:\n  day_str = str(day)\n\nreturn year_str + '-' + month_str + '-' + day_str"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "REQUESTED_BEGIN_DATE",
    "expression": "jython:values = map(lambda x: int(x), value.split('/'))\n\nyear = values[2]\nyear_str = str(year)\n\nmonth = values[0]\nif month < 10:\n  month_str = '0' + str(month)\nelse:\n  month_str = str(month)\n\nday = values[0]\nif day < 10:\n  day_str = '0' + str(day)\nelse:\n  day_str = str(day)\n\nreturn year_str + '-' + month_str + '-' + day_str",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column REQUESTED_BEGIN_DATE using expression jython:values = map(lambda x: int(x), value.split('/'))\n\nyear = values[2]\nyear_str = str(year)\n\nmonth = values[0]\nif month < 10:\n  month_str = '0' + str(month)\nelse:\n  month_str = str(month)\n\nday = values[0]\nif day < 10:\n  day_str = '0' + str(day)\nelse:\n  day_str = str(day)\n\nreturn year_str + '-' + month_str + '-' + day_str"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "REQUESTED_END_DATE",
    "expression": "jython:values = map(lambda x: int(x), value.split('/'))\n\nyear = values[2]\nyear_str = str(year)\n\nmonth = values[0]\nif month < 10:\n  month_str = '0' + str(month)\nelse:\n  month_str = str(month)\n\nday = values[0]\nif day < 10:\n  day_str = '0' + str(day)\nelse:\n  day_str = str(day)\n\nreturn year_str + '-' + month_str + '-' + day_str",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column REQUESTED_END_DATE using expression jython:values = map(lambda x: int(x), value.split('/'))\n\nyear = values[2]\nyear_str = str(year)\n\nmonth = values[0]\nif month < 10:\n  month_str = '0' + str(month)\nelse:\n  month_str = str(month)\n\nday = values[0]\nif day < 10:\n  day_str = '0' + str(day)\nelse:\n  day_str = str(day)\n\nreturn year_str + '-' + month_str + '-' + day_str"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "EMPLOYMENT_BEGIN_DATE",
    "expression": "jython:values = map(lambda x: int(x), value.split('/'))\n\nyear = values[2]\nyear_str = str(year)\n\nmonth = values[0]\nif month < 10:\n  month_str = '0' + str(month)\nelse:\n  month_str = str(month)\n\nday = values[0]\nif day < 10:\n  day_str = '0' + str(day)\nelse:\n  day_str = str(day)\n\nreturn year_str + '-' + month_str + '-' + day_str",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column EMPLOYMENT_BEGIN_DATE using expression jython:values = map(lambda x: int(x), value.split('/'))\n\nyear = values[2]\nyear_str = str(year)\n\nmonth = values[0]\nif month < 10:\n  month_str = '0' + str(month)\nelse:\n  month_str = str(month)\n\nday = values[0]\nif day < 10:\n  day_str = '0' + str(day)\nelse:\n  day_str = str(day)\n\nreturn year_str + '-' + month_str + '-' + day_str"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "EMPLOYMENT_END_DATE",
    "expression": "jython:values = map(lambda x: int(x), value.split('/'))\n\nyear = values[2]\nyear_str = str(year)\n\nmonth = values[0]\nif month < 10:\n  month_str = '0' + str(month)\nelse:\n  month_str = str(month)\n\nday = values[0]\nif day < 10:\n  day_str = '0' + str(day)\nelse:\n  day_str = str(day)\n\nreturn year_str + '-' + month_str + '-' + day_str",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column EMPLOYMENT_END_DATE using expression jython:values = map(lambda x: int(x), value.split('/'))\n\nyear = values[2]\nyear_str = str(year)\n\nmonth = values[0]\nif month < 10:\n  month_str = '0' + str(month)\nelse:\n  month_str = str(month)\n\nday = values[0]\nif day < 10:\n  day_str = '0' + str(day)\nelse:\n  day_str = str(day)\n\nreturn year_str + '-' + month_str + '-' + day_str"
  },
  {
    "op": "core/column-reorder",
    "columnNames": [
      "RECEIVED_DATE",
      "DECISION_DATE",
      "JOB_TITLE",
      "SOC_CODE",
      "SOC_TITLE",
      "TOTAL_WORKERS_CERTIFIED",
      "EMPLOYMENT_BEGIN_DATE",
      "EMPLOYMENT_END_DATE",
      "EMPLOYER_NAME",
      "TRADE_NAME_DBA",
      "EMPLOYER_STATE",
      "EMPLOYER_POSTAL_CODE",
      "EMPLOYER_COUNTRY",
      "NAICS_CODE",
      "ANTICIPATED_NUMBER_OF_HOURS",
      "WORKSITE_STATE",
      "WORKSITE_POSTAL_CODE",
      "BASIC_WAGE_RATE_FROM",
      "BASIC_WAGE_RATE_TO",
      "OVERTIME_RATE_FROM",
      "OVERTIME_RATE_TO",
      "PER"
    ],
    "description": "Reorder columns"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "RECEIVED_DATE",
    "newColumnName": "recievedDate",
    "description": "Rename column RECEIVED_DATE to recievedDate"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "DECISION_DATE",
    "newColumnName": "decisionDate",
    "description": "Rename column DECISION_DATE to decisionDate"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "decisionDate",
    "expression": "jython:return 'H-2B'",
    "onError": "set-to-blank",
    "newColumnName": "visaClass",
    "columnInsertIndex": 2,
    "description": "Create column visaClass at index 2 based on column decisionDate using expression jython:return 'H-2B'"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "JOB_TITLE",
    "newColumnName": "jobTitle",
    "description": "Rename column JOB_TITLE to jobTitle"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "SOC_CODE",
    "newColumnName": "socCode",
    "description": "Rename column SOC_CODE to socCode"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "socCode",
    "expression": "jython:return value[:2]",
    "onError": "set-to-blank",
    "newColumnName": "majorSocCode",
    "columnInsertIndex": 5,
    "description": "Create column majorSocCode at index 5 based on column socCode using expression jython:return value[:2]"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "socCode",
    "expression": "jython:return '-' in value",
    "onError": "set-to-blank",
    "newColumnName": "socCodeWellFormatted",
    "columnInsertIndex": 5,
    "description": "Create column socCodeWellFormatted at index 5 based on column socCode using expression jython:return '-' in value"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "SOC_TITLE",
    "newColumnName": "socTitle",
    "description": "Rename column SOC_TITLE to socTitle"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "TOTAL_WORKERS_CERTIFIED",
    "newColumnName": "totalWorkerPositionsCnt",
    "description": "Rename column TOTAL_WORKERS_CERTIFIED to totalWorkerPositionsCnt"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "EMPLOYMENT_BEGIN_DATE",
    "newColumnName": "visaBeginDate",
    "description": "Rename column EMPLOYMENT_BEGIN_DATE to visaBeginDate"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "EMPLOYMENT_END_DATE",
    "newColumnName": "visaEndDate",
    "description": "Rename column EMPLOYMENT_END_DATE to visaEndDate"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "visaEndDate",
    "expression": "jython:return value >= '2020-05'",
    "onError": "set-to-blank",
    "newColumnName": "visaActiveDuringMay2020",
    "columnInsertIndex": 11,
    "description": "Create column visaActiveDuringMay2020 at index 11 based on column visaEndDate using expression jython:return value >= '2020-05'"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "visaEndDate",
    "expression": "jython:return value >= '2020'",
    "onError": "set-to-blank",
    "newColumnName": "visaActiveDuring2020",
    "columnInsertIndex": 11,
    "description": "Create column visaActiveDuring2020 at index 11 based on column visaEndDate using expression jython:return value >= '2020'"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "EMPLOYER_NAME",
    "newColumnName": "employerName",
    "description": "Rename column EMPLOYER_NAME to employerName"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "TRADE_NAME_DBA",
    "newColumnName": "tradeNameDba",
    "description": "Rename column TRADE_NAME_DBA to tradeNameDba"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "EMPLOYER_STATE",
    "newColumnName": "employerState",
    "description": "Rename column EMPLOYER_STATE to employerState"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "employerState",
    "expression": "jython:abbreviations = {\"alabama\": \"al\",\n\"alaska\": \"ak\",\n\"arizona\": \"az\",\n\"arkansas\": \"ar\",\n\"california\": \"ca\",\n\"colorado\": \"co\",\n\"connecticut\": \"ct\",\n\"delaware\": \"de\",\n\"florida\": \"fl\",\n\"georgia\": \"ga\",\n\"hawaii\": \"hi\",\n\"idaho\": \"id\",\n\"illinois\": \"il\",\n\"indiana\": \"in\",\n\"iowa\": \"ia\",\n\"kansas\": \"ks\",\n\"kentucky\": \"ky\",\n\"louisiana\": \"la\",\n\"maine\": \"me\",\n\"maryland\": \"md\",\n\"massachusetts\": \"ma\",\n\"michigan\": \"mi\",\n\"minnesota\": \"mn\",\n\"mississippi\": \"ms\",\n\"missouri\": \"mo\",\n\"montana\": \"mt\",\n\"nebraska\": \"ne\",\n\"nevada\": \"nv\",\n\"new hampshire\": \"nh\",\n\"new jersey\": \"nj\",\n\"new mexico\": \"nm\",\n\"new york\": \"ny\",\n\"north carolina\": \"nc\",\n\"north dakota\": \"nd\",\n\"ohio\": \"oh\",\n\"oklahoma\": \"ok\",\n\"oregon\": \"or\",\n\"pennsylvania\": \"pa\",\n\"rhode island\": \"ri\",\n\"south carolina\": \"sc\",\n\"south dakota\": \"sd\",\n\"tennessee\": \"tn\",\n\"texas\": \"tx\",\n\"utah\": \"ut\",\n\"vermont\": \"vt\",\n\"virginia\": \"va\",\n\"washington\": \"wa\",\n\"west virginia\": \"wv\",\n\"wisconsin\": \"wi\",\n\"wyoming\": \"wy\"}\n\nvalue_lower = value.lower()\nreturn abbreviations.get(value_lower, value_lower).upper()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column employerState using expression jython:abbreviations = {\"alabama\": \"al\",\n\"alaska\": \"ak\",\n\"arizona\": \"az\",\n\"arkansas\": \"ar\",\n\"california\": \"ca\",\n\"colorado\": \"co\",\n\"connecticut\": \"ct\",\n\"delaware\": \"de\",\n\"florida\": \"fl\",\n\"georgia\": \"ga\",\n\"hawaii\": \"hi\",\n\"idaho\": \"id\",\n\"illinois\": \"il\",\n\"indiana\": \"in\",\n\"iowa\": \"ia\",\n\"kansas\": \"ks\",\n\"kentucky\": \"ky\",\n\"louisiana\": \"la\",\n\"maine\": \"me\",\n\"maryland\": \"md\",\n\"massachusetts\": \"ma\",\n\"michigan\": \"mi\",\n\"minnesota\": \"mn\",\n\"mississippi\": \"ms\",\n\"missouri\": \"mo\",\n\"montana\": \"mt\",\n\"nebraska\": \"ne\",\n\"nevada\": \"nv\",\n\"new hampshire\": \"nh\",\n\"new jersey\": \"nj\",\n\"new mexico\": \"nm\",\n\"new york\": \"ny\",\n\"north carolina\": \"nc\",\n\"north dakota\": \"nd\",\n\"ohio\": \"oh\",\n\"oklahoma\": \"ok\",\n\"oregon\": \"or\",\n\"pennsylvania\": \"pa\",\n\"rhode island\": \"ri\",\n\"south carolina\": \"sc\",\n\"south dakota\": \"sd\",\n\"tennessee\": \"tn\",\n\"texas\": \"tx\",\n\"utah\": \"ut\",\n\"vermont\": \"vt\",\n\"virginia\": \"va\",\n\"washington\": \"wa\",\n\"west virginia\": \"wv\",\n\"wisconsin\": \"wi\",\n\"wyoming\": \"wy\"}\n\nvalue_lower = value.lower()\nreturn abbreviations.get(value_lower, value_lower).upper()"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "EMPLOYER_POSTAL_CODE",
    "newColumnName": "employerZipCode",
    "description": "Rename column EMPLOYER_POSTAL_CODE to employerZipCode"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "EMPLOYER_COUNTRY",
    "newColumnName": "employerCountry",
    "description": "Rename column EMPLOYER_COUNTRY to employerCountry"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "NAICS_CODE",
    "newColumnName": "naicsCode",
    "description": "Rename column NAICS_CODE to naicsCode"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "ANTICIPATED_NUMBER_OF_HOURS",
    "newColumnName": "numberOfHours",
    "description": "Rename column ANTICIPATED_NUMBER_OF_HOURS to numberOfHours"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "WORKSITE_STATE",
    "newColumnName": "worksiteState",
    "description": "Rename column WORKSITE_STATE to worksiteState"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "worksiteState",
    "expression": "jython:abbreviations = {\"alabama\": \"al\",\n\"alaska\": \"ak\",\n\"arizona\": \"az\",\n\"arkansas\": \"ar\",\n\"california\": \"ca\",\n\"colorado\": \"co\",\n\"connecticut\": \"ct\",\n\"delaware\": \"de\",\n\"florida\": \"fl\",\n\"georgia\": \"ga\",\n\"hawaii\": \"hi\",\n\"idaho\": \"id\",\n\"illinois\": \"il\",\n\"indiana\": \"in\",\n\"iowa\": \"ia\",\n\"kansas\": \"ks\",\n\"kentucky\": \"ky\",\n\"louisiana\": \"la\",\n\"maine\": \"me\",\n\"maryland\": \"md\",\n\"massachusetts\": \"ma\",\n\"michigan\": \"mi\",\n\"minnesota\": \"mn\",\n\"mississippi\": \"ms\",\n\"missouri\": \"mo\",\n\"montana\": \"mt\",\n\"nebraska\": \"ne\",\n\"nevada\": \"nv\",\n\"new hampshire\": \"nh\",\n\"new jersey\": \"nj\",\n\"new mexico\": \"nm\",\n\"new york\": \"ny\",\n\"north carolina\": \"nc\",\n\"north dakota\": \"nd\",\n\"ohio\": \"oh\",\n\"oklahoma\": \"ok\",\n\"oregon\": \"or\",\n\"pennsylvania\": \"pa\",\n\"rhode island\": \"ri\",\n\"south carolina\": \"sc\",\n\"south dakota\": \"sd\",\n\"tennessee\": \"tn\",\n\"texas\": \"tx\",\n\"utah\": \"ut\",\n\"vermont\": \"vt\",\n\"virginia\": \"va\",\n\"washington\": \"wa\",\n\"west virginia\": \"wv\",\n\"wisconsin\": \"wi\",\n\"wyoming\": \"wy\"}\n\nvalue_lower = value.lower()\nreturn abbreviations.get(value_lower, value_lower).upper()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column worksiteState using expression jython:abbreviations = {\"alabama\": \"al\",\n\"alaska\": \"ak\",\n\"arizona\": \"az\",\n\"arkansas\": \"ar\",\n\"california\": \"ca\",\n\"colorado\": \"co\",\n\"connecticut\": \"ct\",\n\"delaware\": \"de\",\n\"florida\": \"fl\",\n\"georgia\": \"ga\",\n\"hawaii\": \"hi\",\n\"idaho\": \"id\",\n\"illinois\": \"il\",\n\"indiana\": \"in\",\n\"iowa\": \"ia\",\n\"kansas\": \"ks\",\n\"kentucky\": \"ky\",\n\"louisiana\": \"la\",\n\"maine\": \"me\",\n\"maryland\": \"md\",\n\"massachusetts\": \"ma\",\n\"michigan\": \"mi\",\n\"minnesota\": \"mn\",\n\"mississippi\": \"ms\",\n\"missouri\": \"mo\",\n\"montana\": \"mt\",\n\"nebraska\": \"ne\",\n\"nevada\": \"nv\",\n\"new hampshire\": \"nh\",\n\"new jersey\": \"nj\",\n\"new mexico\": \"nm\",\n\"new york\": \"ny\",\n\"north carolina\": \"nc\",\n\"north dakota\": \"nd\",\n\"ohio\": \"oh\",\n\"oklahoma\": \"ok\",\n\"oregon\": \"or\",\n\"pennsylvania\": \"pa\",\n\"rhode island\": \"ri\",\n\"south carolina\": \"sc\",\n\"south dakota\": \"sd\",\n\"tennessee\": \"tn\",\n\"texas\": \"tx\",\n\"utah\": \"ut\",\n\"vermont\": \"vt\",\n\"virginia\": \"va\",\n\"washington\": \"wa\",\n\"west virginia\": \"wv\",\n\"wisconsin\": \"wi\",\n\"wyoming\": \"wy\"}\n\nvalue_lower = value.lower()\nreturn abbreviations.get(value_lower, value_lower).upper()"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "WORKSITE_POSTAL_CODE",
    "newColumnName": "worksiteZipCode",
    "description": "Rename column WORKSITE_POSTAL_CODE to worksiteZipCode"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "BASIC_WAGE_RATE_FROM",
    "newColumnName": "wageRateOfPayFromUsd",
    "description": "Rename column BASIC_WAGE_RATE_FROM to wageRateOfPayFromUsd"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "wageRateOfPayFromUsd",
    "expression": "jython:return float(value.replace('$', '').replace(',', ''))",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column wageRateOfPayFromUsd using expression jython:return float(value.replace('$', '').replace(',', ''))"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "BASIC_WAGE_RATE_TO",
    "expression": "jython:return float(value.replace('$', '').replace(',', ''))",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column BASIC_WAGE_RATE_TO using expression jython:return float(value.replace('$', '').replace(',', ''))"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "BASIC_WAGE_RATE_TO",
    "newColumnName": "wageRateOfPayToUsd",
    "description": "Rename column BASIC_WAGE_RATE_TO to wageRateOfPayToUsd"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "OVERTIME_RATE_FROM",
    "newColumnName": "overtimeRateFromUsd",
    "description": "Rename column OVERTIME_RATE_FROM to overtimeRateFromUsd"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "overtimeRateFromUsd",
    "expression": "jython:return float(value.replace('$', '').replace(',', ''))",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column overtimeRateFromUsd using expression jython:return float(value.replace('$', '').replace(',', ''))"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "OVERTIME_RATE_TO",
    "expression": "jython:return float(value.replace('$', '').replace(',', ''))",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column OVERTIME_RATE_TO using expression jython:return float(value.replace('$', '').replace(',', ''))"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "OVERTIME_RATE_TO",
    "newColumnName": "overtimeRateToUsd",
    "description": "Rename column OVERTIME_RATE_TO to overtimeRateToUsd"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "PER",
    "newColumnName": "overtimeUnitOfPay",
    "description": "Rename column PER to overtimeUnitOfPay"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "wageRateOfPayToUsd",
    "expression": "jython:return cells['overtimeUnitOfPay'].value",
    "onError": "set-to-blank",
    "newColumnName": "wageUnitOfPay",
    "columnInsertIndex": 24,
    "description": "Create column wageUnitOfPay at index 24 based on column wageRateOfPayToUsd using expression jython:return cells['overtimeUnitOfPay'].value"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "wageUnitOfPay",
    "expression": "jython:return ''",
    "onError": "set-to-blank",
    "newColumnName": "prevalingWageUsd",
    "columnInsertIndex": 25,
    "description": "Create column prevalingWageUsd at index 25 based on column wageUnitOfPay using expression jython:return ''"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "prevalingWageUsd",
    "expression": "jython:return value",
    "onError": "set-to-blank",
    "newColumnName": "prevalingWageUsdUnitOfPay",
    "columnInsertIndex": 26,
    "description": "Create column prevalingWageUsdUnitOfPay at index 26 based on column prevalingWageUsd using expression jython:return value"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "prevalingWageUsdUnitOfPay",
    "expression": "jython:return value",
    "onError": "set-to-blank",
    "newColumnName": "prevalingWageLevel",
    "columnInsertIndex": 27,
    "description": "Create column prevalingWageLevel at index 27 based on column prevalingWageUsdUnitOfPay using expression jython:return value"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "prevalingWageLevel",
    "expression": "jython:return value",
    "onError": "set-to-blank",
    "newColumnName": "prevalingWageOESYear",
    "columnInsertIndex": 28,
    "description": "Create column prevalingWageOESYear at index 28 based on column prevalingWageLevel using expression jython:return value"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "prevalingWageOESYear",
    "expression": "jython:return value",
    "onError": "set-to-blank",
    "newColumnName": "pieceRateOfPayUsd",
    "columnInsertIndex": 29,
    "description": "Create column pieceRateOfPayUsd at index 29 based on column prevalingWageOESYear using expression jython:return value"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "pieceRateOfPayUsd",
    "expression": "jython:return value",
    "onError": "set-to-blank",
    "newColumnName": "pieceUnitOfPay",
    "columnInsertIndex": 30,
    "description": "Create column pieceUnitOfPay at index 30 based on column pieceRateOfPayUsd using expression jython:return value"
  },
  {
    "op": "core/column-reorder",
    "columnNames": [
      "recievedDate",
      "decisionDate",
      "visaClass",
      "jobTitle",
      "socCode",
      "majorSocCode",
      "socCodeWellFormatted",
      "socTitle",
      "visaBeginDate",
      "visaEndDate",
      "visaActiveDuringMay2020",
      "visaActiveDuring2020",
      "totalWorkerPositionsCnt",
      "employerName",
      "tradeNameDba",
      "employerState",
      "employerZipCode",
      "employerCountry",
      "naicsCode",
      "numberOfHours",
      "worksiteState",
      "worksiteZipCode",
      "wageRateOfPayFromUsd",
      "wageRateOfPayToUsd",
      "wageUnitOfPay",
      "prevalingWageUsd",
      "prevalingWageUsdUnitOfPay",
      "prevalingWageLevel",
      "prevalingWageOESYear",
      "pieceRateOfPayUsd",
      "pieceUnitOfPay",
      "overtimeRateFromUsd",
      "overtimeRateToUsd",
      "overtimeUnitOfPay"
    ],
    "description": "Reorder columns"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "socTitle",
    "expression": "jython:return ''",
    "onError": "set-to-blank",
    "newColumnName": "isFullTime",
    "columnInsertIndex": 8,
    "description": "Create column isFullTime at index 8 based on column socTitle using expression jython:return ''"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "numberOfHours",
    "newColumnName": "anticipatedNumberOfHours",
    "description": "Rename column numberOfHours to anticipatedNumberOfHours"
  }
]
